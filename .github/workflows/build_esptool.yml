name: Build pesptool

on: [push, pull_request]

jobs:
  build-pesptool-binaries:
    name: Build pesptool binaries for ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        platform: [windows-amd64, linux-amd64, macos-amd64, macos-arm64, linux-armv7, linux-aarch64]
        include:
          - platform: windows-amd64
            runner: windows-latest
          - platform: linux-amd64
            runner: ubuntu-latest
          - platform: macos-amd64
            runner: macos-15-intel
          - platform: macos-arm64
            runner: macos-latest
          - platform: linux-armv7
            runner: ubuntu-latest
          - platform: linux-aarch64
            runner: ubuntu-24.04-arm
    env:
      DISTPATH: pesptool-${{ matrix.platform }}
      STUBS_DIR: ./pesptool/targets/stub_flasher/
      EFUSE_DIR: ./espefuse/efuse_defs/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        if: (matrix.platform != 'linux-armv7') || contains(github.ref_name, 'dev')
        with:
          python-version: "3.13"
      - name: Patch version for dev releases
        if: contains(github.ref_name, 'dev')
        run: |
          echo "Patching version for dev release: ${{ github.ref_name }}"
          python ci/patch_dev_release.py --version ${{ github.ref_name }} pesptool/__init__.py
          git diff
      - name: Build with PyInstaller
        uses: espressif/python-binary-action@master
        with:
          scripts: 'pesptool.py espefuse.py espsecure.py esp_rfc2217_server.py'
          output-dir: ./${{ env.DISTPATH }}
          include-data-dirs: |
            {
              "pesptool.py": [
                "${{ env.STUBS_DIR }}1",
                "${{ env.STUBS_DIR }}2"
              ],
              "espefuse.py": [
                "${{ env.EFUSE_DIR }}"
              ]
            }
          icon-file: ${{ matrix.platform == 'windows-amd64' && 'ci/espressif.ico' || '' }}
          target-platform: ${{ matrix.platform }}
          additional-arm-packages: 'openssl libffi-dev libssl-dev libffi7'
          certificate: ${{ secrets.CERTIFICATE }}
          certificate-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Add license and readme
        shell: bash
        run: mv LICENSE README.md ./${{ env.DISTPATH }}

      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DISTPATH }}
          path: ${{ env.DISTPATH }}

  create_release:
    name: Create GitHub release
    if: startsWith(github.ref, 'refs/tags/') && !(contains(github.ref_name, 'dev'))
    needs: [build-pesptool-binaries]
    runs-on: ubuntu-latest
    env:
      PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi"
    permissions:
      contents: write
    steps:
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          pip install --user -e ".[dev]"
      - name: Generate changelog
        run: |
          cz changelog ${{ steps.get_version.outputs.VERSION }} --template ci/gh_changelog_template.md.j2 --file-name changelog_body.md
          cat changelog_body.md
      - name: Download built binaries
        uses: actions/download-artifact@master
      - name: Compress and rename binaries
        run: |
          for dir in pesptool-*; do
            if [[ "$dir" == pesptool-win* ]]; then
              zip -r "pesptool-v${{ steps.get_version.outputs.VERSION }}-${dir#pesptool-}.zip" "$dir"
            else
              chmod -R u=rwx,g=rx,o=rx "$dir"
              tar -cvzf "pesptool-v${{ steps.get_version.outputs.VERSION }}-${dir#pesptool-}.tar.gz" "$dir"
            fi
          done
      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: changelog_body.md
          name: Version ${{ steps.get_version.outputs.VERSION }}
          draft: true
          prerelease: false
          files: |
            pesptool-v${{ steps.get_version.outputs.VERSION }}-*.zip
            pesptool-v${{ steps.get_version.outputs.VERSION }}-*.tar.gz
